name: Provision and Deploy to EC2

on:
  workflow_dispatch:

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-oidc
          aws-region: ${{ vars.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://cloudformation/ec2-template.yml

      - name: Deploy CloudFormation stack
        id: cfn
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/ec2-template.yml \
            --stack-name my-ec2-stack \
            --parameter-overrides KeyName=${{ vars.EC2_KEY_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM
          # Get the public IP from stack outputs
          INSTANCE_IP=$(aws cloudformation describe-stacks --stack-name my-ec2-stack \
            --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIp'].OutputValue" --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "."
          target: "/home/${{ vars.EC2_USER }}/app"

      - name: Run deployment commands on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/${{ vars.EC2_USER }}/app

            # Ensure user is in docker group (will need to re-login for this to take effect)
            if ! groups | grep -q '\bdocker\b'; then
              sudo usermod -aG docker $USER
              echo "Added $USER to docker group. You must log out and log back in for this to take effect."
            fi

            # Install Docker if not present
            if ! command -v docker &> /dev/null
            then
              yum update -y
              yum install -y docker
              systemctl start docker
              sleep 5
            fi

            docker stop myapp 2>/dev/null || true
            docker rm myapp 2>/dev/null || true
            docker build -t myapp:latest -f builders/Dockerfile .
            docker run -d --name myapp -p 80:8080 myapp:latest